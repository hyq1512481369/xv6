diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..22bca13 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -26,11 +26,16 @@ static void
 barrier()
 {
   // YOUR CODE HERE
-  //
-  // Block until all threads have called barrier() and
-  // then increment bstate.round.
-  //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  //判断是否到barrier
+  if(++bstate.nthread != nthread)  {    // 没全到 
+    pthread_cond_wait(&bstate.barrier_cond,&bstate.barrier_mutex);  // wait other threads
+  } else {  // 全到达
+    bstate.nthread = 0; // reset nthread
+    ++bstate.round; // increase round
+    pthread_cond_broadcast(&bstate.barrier_cond);   // wake up all sleeping threads
+  }
+pthread_mutex_unlock(&bstate.barrier_mutex);
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 6df1500..964e886 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -7,7 +7,6 @@
 
 #define NBUCKET 5
 #define NKEYS 100000
-
 struct entry {
   int key;
   int value;
@@ -35,11 +34,13 @@ insert(int key, int value, struct entry **p, struct entry *n)
   *p = e;
 }
 
+pthread_mutex_t lock[NBUCKET];
 static 
 void put(int key, int value)
 {
   int i = key % NBUCKET;
 
+  pthread_mutex_lock(&lock[i]);
   // is the key already present?
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
@@ -53,6 +54,7 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
+  pthread_mutex_unlock(&lock[i]);
 }
 
 static struct entry*
@@ -60,12 +62,12 @@ get(int key)
 {
   int i = key % NBUCKET;
 
-
+  pthread_mutex_lock(&lock[i]);
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
     if (e->key == key) break;
   }
-
+  pthread_mutex_unlock(&lock[i]);
   return e;
 }
 
@@ -114,6 +116,9 @@ main(int argc, char *argv[])
   for (int i = 0; i < NKEYS; i++) {
     keys[i] = random();
   }
+    for(int i = 0; i < NBUCKET; i++) {
+    pthread_mutex_init(&lock[i], NULL);
+  }
 
   //
   // first the puts
diff --git a/user/uthread.c b/user/uthread.c
index 8e46826..5d82aa8 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,11 +10,30 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+//mine 和proc.h里面的contex一致
+struct ctx {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
-
+  struct ctx context;       // mine 线程的context
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -63,6 +82,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch((uint64)&t->context, (uint64)&current_thread->context);   // 调用thread swtich
   } else
     next_thread = 0;
 }
@@ -77,6 +97,9 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  // mine  记录ra和sp
+  t->context.ra = (uint64) func;
+  t->context.sp = (uint64) t->stack + STACK_SIZE;
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..cb1b1e1 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -1,11 +1,40 @@
 	.text
 
 	/*
-         * save the old thread's registers,
-         * restore the new thread's registers.
-         */
+     * save the old thread's registers,
+     * restore the new thread's registers.
+     */
 
 	.globl thread_switch
 thread_switch:
 	/* YOUR CODE HERE */
+    sd ra, 0(a0)
+    sd sp, 8(a0)
+    sd s0, 16(a0)
+    sd s1, 24(a0)
+    sd s2, 32(a0)
+    sd s3, 40(a0)
+    sd s4, 48(a0)
+    sd s5, 56(a0)
+    sd s6, 64(a0)
+    sd s7, 72(a0)
+    sd s8, 80(a0)
+    sd s9, 88(a0)
+    sd s10, 96(a0)
+    sd s11, 104(a0)
+
+    ld ra, 0(a1)
+    ld sp, 8(a1)
+    ld s0, 16(a1)
+    ld s1, 24(a1)
+    ld s2, 32(a1)
+    ld s3, 40(a1)
+    ld s4, 48(a1)
+    ld s5, 56(a1)
+    ld s6, 64(a1)
+    ld s7, 72(a1)
+    ld s8, 80(a1)
+    ld s9, 88(a1)
+    ld s10, 96(a1)
+    ld s11, 104(a1)
 	ret    /* return to ra */
