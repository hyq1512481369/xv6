diff --git a/kernel/defs.h b/kernel/defs.h
index 59f7aae..59382aa 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -108,6 +108,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            free_k_pagetable(pagetable_t );
+void            proc_free_k_pagetable(struct proc *);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -179,6 +181,12 @@ int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 int             test_pagetable();
+void            vmprint(pagetable_t);
+void            fmtprint(pagetable_t,int,uint64);
+pagetable_t     one_kvminit(void);
+void            one_kvmmap(pagetable_t,uint64, uint64, uint64, int);
+pte_t *         walk(pagetable_t, uint64, int);
+int             sync_pagetable(pagetable_t, pagetable_t, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
@@ -224,3 +232,7 @@ int             sockread(struct sock *, uint64, int);
 int             sockwrite(struct sock *, uint64, int);
 void            sockrecvudp(struct mbuf*, uint32, uint16, uint16);
 #endif
+
+//vmcopyin.c
+int copyin_new(pagetable_t, char *, uint64, uint64);
+int copyinstr_new(pagetable_t, char *, uint64, uint64);
\ No newline at end of file
diff --git a/kernel/exec.c b/kernel/exec.c
index 7b8a524..257ae5e 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -41,6 +41,8 @@ int exec(char *path, char **argv) {
     if (ph.vaddr + ph.memsz < ph.vaddr) goto bad;
     uint64 sz1;
     if ((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz)) == 0) goto bad;
+    if (sz1 >= PLIC) goto bad;
+    //不满足要求的情况处理
     sz = sz1;
     if (ph.vaddr % PGSIZE != 0) goto bad;
     if (loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0) goto bad;
@@ -92,11 +94,16 @@ int exec(char *path, char **argv) {
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+  uvmunmap(p->k_pagetable, 0, PGROUNDDOWN(p->sz)/PGSIZE, 0);
+  //处理同步
+  sync_pagetable(pagetable, p->k_pagetable, 0, sz);
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp;          // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1)//题目要求
+    vmprint(p->pagetable);
   return argc;  // this ends up in a0, the first argument to main(argc, argv)
 
 bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 292ccb8..fcf1200 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -37,6 +37,7 @@ void procinit(void) {
     uint64 va = KSTACK((int)(p - proc));
     kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
     p->kstack = va;
+    p->kstack_pa=(uint64)pa;
   }
   kvminithart();
 }
@@ -116,6 +117,8 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+    p->k_pagetable=one_kvminit();
+    one_kvmmap(p->k_pagetable,p->kstack, p->kstack_pa, PGSIZE, PTE_R | PTE_W);
 
   return p;
 }
@@ -126,6 +129,8 @@ found:
 static void freeproc(struct proc *p) {
   if (p->trapframe) kfree((void *)p->trapframe);
   p->trapframe = 0;
+  if(p->k_pagetable) proc_free_k_pagetable(p);
+  p->k_pagetable = 0;
   if (p->pagetable) proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -193,6 +198,7 @@ void userinit(void) {
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
+  sync_pagetable(p->pagetable, p->k_pagetable, 0, p->sz);
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -213,11 +219,20 @@ int growproc(int n) {
 
   sz = p->sz;
   if (n > 0) {
+    if(PGROUNDDOWN(sz + n) >= PLIC)
+      return -1;
     if ((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    sync_pagetable(p->pagetable, p->k_pagetable, p->sz, sz);
   } else if (n < 0) {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    int new_sz = p->sz + n;
+    if(PGROUNDDOWN(new_sz) < PGROUNDUP(p->sz))
+    {
+      int n = (PGROUNDUP(p->sz) - PGROUNDUP(new_sz))/PGSIZE;
+      uvmunmap(p->k_pagetable, PGROUNDUP(new_sz), n, 0);
+    }
   }
   p->sz = sz;
   return 0;
@@ -236,7 +251,7 @@ int fork(void) {
   }
 
   // Copy user memory from parent to child.
-  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0) {
+  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0 || sync_pagetable(np->pagetable, np->k_pagetable, 0, p->sz)) {
     freeproc(np);
     release(&np->lock);
     return -1;
@@ -430,8 +445,11 @@ void scheduler(void) {
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+        w_satp(MAKE_SATP(p->k_pagetable));
+        sfence_vma();
         swtch(&c->context, &p->context);
 
+        kvminithart();
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
@@ -623,3 +641,23 @@ void procdump(void) {
     printf("\n");
   }
 }
+void free_k_pagetable(pagetable_t pagetable)
+{
+  for(int i = 0; i < 512; ++i)
+  {
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0)//非叶
+    {
+      pagetable[i] = 0;
+      free_k_pagetable((pagetable_t)PTE2PA(pte));
+    } else if(pte & PTE_V){
+      pagetable[i] = 0;
+    }
+  }
+  kfree((void *)pagetable);
+}
+
+void proc_free_k_pagetable(struct proc *p)
+{
+  free_k_pagetable(p->k_pagetable);
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..5c5ee9a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  pagetable_t k_pagetable;
+  uint64 kstack_pa;
 };
diff --git a/kernel/vm.c b/kernel/vm.c
index b794885..23b9818 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -316,6 +318,7 @@ int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
+  /*
   uint64 n, va0, pa0;
 
   while (len > 0) {
@@ -331,6 +334,8 @@ int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
     srcva = va0 + PGSIZE;
   }
   return 0;
+  */
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -338,7 +343,9 @@ int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
 // until a '\0', or max.
 // Return 0 on success, -1 on error.
 int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
-  uint64 n, va0, pa0;
+ return copyinstr_new(pagetable, dst, srcva, max);
+ /* 
+ uint64 n, va0, pa0;
   int got_null = 0;
 
   while (got_null == 0 && max > 0) {
@@ -370,6 +377,7 @@ int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
   } else {
     return -1;
   }
+  */
 }
 
 // check if use global kpgtbl or not
@@ -378,4 +386,87 @@ int test_pagetable() {
   uint64 gsatp = MAKE_SATP(kernel_pagetable);
   printf("test_pagetable: %d\n", satp != gsatp);
   return satp != gsatp;
-}
\ No newline at end of file
+}
+
+void fmtprint(pagetable_t pagetable,int level,uint64 va){
+  va=va<<9;
+  if(pagetable==0) return;
+  for(int i = 0; i < 512; i++){
+    va=((va>>9)<<9)+i;
+    if(pagetable[i]==0) continue;
+    pte_t pte = pagetable[i];
+    if(pte & PTE_V){
+      uint64 pa = PTE2PA(pte);
+      if((pte & (PTE_R|PTE_W|PTE_X))!=0)
+        level=0;
+      switch (level)
+      {
+      case 2:
+        printf("||idx: %d: pa: %p, flags: ----\n",i,pa);
+        fmtprint((pagetable_t)pa,level-1,va);
+        break;
+      case 1:
+        printf("|| ||idx: %d: pa: %p, flags: ----\n",i,pa);
+        fmtprint((pagetable_t)pa,level-1,va);
+        break;
+      case 0:
+        {
+        char *r=(pte&PTE_R)?"r":"-";
+        char *w=(pte&PTE_W)?"w":"-";
+        char *x=(pte&PTE_X)?"x":"-";
+        char *u=(pte&PTE_U)?"u":"-";
+        printf("|| || ||idx: %d: va: %p -> pa: %p, flags: %s%s%s%s\n",i,(va<<12)+(pa&0xfff),pa,r,w,x,u);
+        }
+      }
+    }
+  }
+}
+
+void vmprint(pagetable_t pagetable){
+  printf("page table %p\n",pagetable);
+  fmtprint(pagetable,2,0);
+}
+
+pagetable_t one_kvminit() {
+  pagetable_t one = (pagetable_t)kalloc();
+  memset(one, 0, PGSIZE);
+  // uart registers
+  one_kvmmap(one,UART0, UART0, PGSIZE, PTE_R | PTE_W);
+  // virtio mmio disk interface
+  one_kvmmap(one,VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+  // CLINT
+  //one_kvmmap(one,CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+  // PLIC
+  one_kvmmap(one,PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+  // map kernel text executable and read-only.
+  one_kvmmap(one,KERNBASE, KERNBASE, (uint64)etext - KERNBASE, PTE_R | PTE_X);
+  // map kernel data and the physical RAM we'll make use of.
+  one_kvmmap(one,(uint64)etext, (uint64)etext, PHYSTOP - (uint64)etext, PTE_R | PTE_W);
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  one_kvmmap(one,TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  return one;
+}
+void one_kvmmap(pagetable_t one,uint64 va, uint64 pa, uint64 sz, int perm) {
+  if (mappages(one, va, sz, pa, perm) != 0) panic("kvmmap");
+}
+
+
+
+
+int sync_pagetable(pagetable_t user, pagetable_t kernel, uint64 start, uint64 end){
+  pte_t *pte, *newPte;
+  uint Myflag;
+    uint64 pa;
+  for(uint64 i = PGROUNDDOWN(start); i < end; i += PGSIZE){
+    if((pte = walk(user, i, 0)) == 0)
+      panic("not exist");
+    if((newPte = walk(kernel, i, 1)) == 0)
+      panic("not present");    
+    //获取flag的值,但是不要U
+    Myflag = PTE_FLAGS(*pte) & (~PTE_U);
+    pa = PTE2PA(*pte);
+    *newPte = PA2PTE(pa) | Myflag;
+  }
+  return 0;
+}
